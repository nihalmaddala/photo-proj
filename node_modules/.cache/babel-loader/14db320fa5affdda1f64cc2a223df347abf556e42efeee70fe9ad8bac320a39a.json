{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { VERSION } from \"../version.mjs\";\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */\nfunction getDetectedPlatform() {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return 'deno';\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return 'edge';\n  }\n  if (Object.prototype.toString.call(typeof globalThis.process !== 'undefined' ? globalThis.process : 0) === '[object process]') {\n    return 'node';\n  }\n  return 'unknown';\n}\nconst getPlatformProperties = () => {\n  const detectedPlatform = getDetectedPlatform();\n  if (detectedPlatform === 'deno') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown'\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': globalThis.process.version\n    };\n  }\n  // Check if Node.js\n  if (detectedPlatform === 'node') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(globalThis.process.platform ?? 'unknown'),\n      'X-Stainless-Arch': normalizeArch(globalThis.process.arch ?? 'unknown'),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': globalThis.process.version ?? 'unknown'\n    };\n  }\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version\n    };\n  }\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown'\n  };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n  // NOTE: The order matters here!\n  const browserPatterns = [{\n    key: 'edge',\n    pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'ie',\n    pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'chrome',\n    pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'firefox',\n    pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/\n  }, {\n    key: 'safari',\n    pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/\n  }];\n  // Find the FIRST matching browser\n  for (const {\n    key,\n    pattern\n  } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n      return {\n        browser: key,\n        version: `${major}.${minor}.${patch}`\n      };\n    }\n  }\n  return null;\n}\nconst normalizeArch = arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\nconst normalizePlatform = platform => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n  platform = platform.toLowerCase();\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\nlet _platformHeaders;\nexport const getPlatformHeaders = () => {\n  return _platformHeaders ?? (_platformHeaders = getPlatformProperties());\n};","map":{"version":3,"names":["VERSION","isRunningInBrowser","window","document","navigator","getDetectedPlatform","Deno","build","EdgeRuntime","Object","prototype","toString","call","globalThis","process","getPlatformProperties","detectedPlatform","normalizePlatform","os","normalizeArch","arch","version","deno","platform","browserInfo","getBrowserInfo","browser","browserPatterns","key","pattern","match","exec","userAgent","major","minor","patch","toLowerCase","includes","_platformHeaders","getPlatformHeaders"],"sources":["/Users/nihalmaddala/photo-proj/node_modules/openai/src/internal/detect-platform.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { VERSION } from '../version';\n\nexport const isRunningInBrowser = () => {\n  return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n    // @ts-ignore\n    typeof window.document !== 'undefined' &&\n    // @ts-ignore\n    typeof navigator !== 'undefined'\n  );\n};\n\ntype DetectedPlatform = 'deno' | 'node' | 'edge' | 'unknown';\n\n/**\n * Note this does not detect 'browser'; for that, use getBrowserInfo().\n */\nfunction getDetectedPlatform(): DetectedPlatform {\n  if (typeof Deno !== 'undefined' && Deno.build != null) {\n    return 'deno';\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return 'edge';\n  }\n  if (\n    Object.prototype.toString.call(\n      typeof (globalThis as any).process !== 'undefined' ? (globalThis as any).process : 0,\n    ) === '[object process]'\n  ) {\n    return 'node';\n  }\n  return 'unknown';\n}\n\ndeclare const Deno: any;\ndeclare const EdgeRuntime: any;\ntype Arch = 'x32' | 'x64' | 'arm' | 'arm64' | `other:${string}` | 'unknown';\ntype PlatformName =\n  | 'MacOS'\n  | 'Linux'\n  | 'Windows'\n  | 'FreeBSD'\n  | 'OpenBSD'\n  | 'iOS'\n  | 'Android'\n  | `Other:${string}`\n  | 'Unknown';\ntype Browser = 'ie' | 'edge' | 'chrome' | 'firefox' | 'safari';\ntype PlatformProperties = {\n  'X-Stainless-Lang': 'js';\n  'X-Stainless-Package-Version': string;\n  'X-Stainless-OS': PlatformName;\n  'X-Stainless-Arch': Arch;\n  'X-Stainless-Runtime': 'node' | 'deno' | 'edge' | `browser:${Browser}` | 'unknown';\n  'X-Stainless-Runtime-Version': string;\n};\nconst getPlatformProperties = (): PlatformProperties => {\n  const detectedPlatform = getDetectedPlatform();\n  if (detectedPlatform === 'deno') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform(Deno.build.os),\n      'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n      'X-Stainless-Runtime': 'deno',\n      'X-Stainless-Runtime-Version':\n        typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n    };\n  }\n  if (typeof EdgeRuntime !== 'undefined') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': `other:${EdgeRuntime}`,\n      'X-Stainless-Runtime': 'edge',\n      'X-Stainless-Runtime-Version': (globalThis as any).process.version,\n    };\n  }\n  // Check if Node.js\n  if (detectedPlatform === 'node') {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': normalizePlatform((globalThis as any).process.platform ?? 'unknown'),\n      'X-Stainless-Arch': normalizeArch((globalThis as any).process.arch ?? 'unknown'),\n      'X-Stainless-Runtime': 'node',\n      'X-Stainless-Runtime-Version': (globalThis as any).process.version ?? 'unknown',\n    };\n  }\n\n  const browserInfo = getBrowserInfo();\n  if (browserInfo) {\n    return {\n      'X-Stainless-Lang': 'js',\n      'X-Stainless-Package-Version': VERSION,\n      'X-Stainless-OS': 'Unknown',\n      'X-Stainless-Arch': 'unknown',\n      'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n      'X-Stainless-Runtime-Version': browserInfo.version,\n    };\n  }\n\n  // TODO add support for Cloudflare workers, etc.\n  return {\n    'X-Stainless-Lang': 'js',\n    'X-Stainless-Package-Version': VERSION,\n    'X-Stainless-OS': 'Unknown',\n    'X-Stainless-Arch': 'unknown',\n    'X-Stainless-Runtime': 'unknown',\n    'X-Stainless-Runtime-Version': 'unknown',\n  };\n};\n\ntype BrowserInfo = {\n  browser: Browser;\n  version: string;\n};\n\ndeclare const navigator: { userAgent: string } | undefined;\n\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo(): BrowserInfo | null {\n  if (typeof navigator === 'undefined' || !navigator) {\n    return null;\n  }\n\n  // NOTE: The order matters here!\n  const browserPatterns = [\n    { key: 'edge' as const, pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'ie' as const, pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'chrome' as const, pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'firefox' as const, pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n    { key: 'safari' as const, pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n  ];\n\n  // Find the FIRST matching browser\n  for (const { key, pattern } of browserPatterns) {\n    const match = pattern.exec(navigator.userAgent);\n    if (match) {\n      const major = match[1] || 0;\n      const minor = match[2] || 0;\n      const patch = match[3] || 0;\n\n      return { browser: key, version: `${major}.${minor}.${patch}` };\n    }\n  }\n\n  return null;\n}\n\nconst normalizeArch = (arch: string): Arch => {\n  // Node docs:\n  // - https://nodejs.org/api/process.html#processarch\n  // Deno docs:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  if (arch === 'x32') return 'x32';\n  if (arch === 'x86_64' || arch === 'x64') return 'x64';\n  if (arch === 'arm') return 'arm';\n  if (arch === 'aarch64' || arch === 'arm64') return 'arm64';\n  if (arch) return `other:${arch}`;\n  return 'unknown';\n};\n\nconst normalizePlatform = (platform: string): PlatformName => {\n  // Node platforms:\n  // - https://nodejs.org/api/process.html#processplatform\n  // Deno platforms:\n  // - https://doc.deno.land/deno/stable/~/Deno.build\n  // - https://github.com/denoland/deno/issues/14799\n\n  platform = platform.toLowerCase();\n\n  // NOTE: this iOS check is untested and may not work\n  // Node does not work natively on IOS, there is a fork at\n  // https://github.com/nodejs-mobile/nodejs-mobile\n  // however it is unknown at the time of writing how to detect if it is running\n  if (platform.includes('ios')) return 'iOS';\n  if (platform === 'android') return 'Android';\n  if (platform === 'darwin') return 'MacOS';\n  if (platform === 'win32') return 'Windows';\n  if (platform === 'freebsd') return 'FreeBSD';\n  if (platform === 'openbsd') return 'OpenBSD';\n  if (platform === 'linux') return 'Linux';\n  if (platform) return `Other:${platform}`;\n  return 'Unknown';\n};\n\nlet _platformHeaders: PlatformProperties;\nexport const getPlatformHeaders = () => {\n  return (_platformHeaders ??= getPlatformProperties());\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}