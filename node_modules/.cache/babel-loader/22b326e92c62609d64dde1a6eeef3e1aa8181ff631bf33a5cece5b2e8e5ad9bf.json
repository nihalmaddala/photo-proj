{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n/**\n * https://stackoverflow.com/a/2117523\n */\nexport let uuid4 = function () {\n  const {\n    crypto\n  } = globalThis;\n  if (crypto?.randomUUID) {\n    uuid4 = crypto.randomUUID.bind(crypto);\n    return crypto.randomUUID();\n  }\n  const u8 = new Uint8Array(1);\n  const randomByte = crypto ? () => crypto.getRandomValues(u8)[0] : () => Math.random() * 0xff & 0xff;\n  return '10000000-1000-4000-8000-100000000000'.replace(/[018]/g, c => (+c ^ randomByte() & 15 >> +c / 4).toString(16));\n};","map":{"version":3,"names":["uuid4","crypto","globalThis","randomUUID","bind","u8","Uint8Array","randomByte","getRandomValues","Math","random","replace","c","toString"],"sources":["/Users/nihalmaddala/photo-proj/node_modules/openai/src/internal/utils/uuid.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\n/**\n * https://stackoverflow.com/a/2117523\n */\nexport let uuid4 = function () {\n  const { crypto } = globalThis as any;\n  if (crypto?.randomUUID) {\n    uuid4 = crypto.randomUUID.bind(crypto);\n    return crypto.randomUUID();\n  }\n  const u8 = new Uint8Array(1);\n  const randomByte = crypto ? () => crypto.getRandomValues(u8)[0]! : () => (Math.random() * 0xff) & 0xff;\n  return '10000000-1000-4000-8000-100000000000'.replace(/[018]/g, (c) =>\n    (+c ^ (randomByte() & (15 >> (+c / 4)))).toString(16),\n  );\n};\n"],"mappings":"AAAA;AAEA;;;AAGA,OAAO,IAAIA,KAAK,GAAG,SAAAA,CAAA;EACjB,MAAM;IAAEC;EAAM,CAAE,GAAGC,UAAiB;EACpC,IAAID,MAAM,EAAEE,UAAU,EAAE;IACtBH,KAAK,GAAGC,MAAM,CAACE,UAAU,CAACC,IAAI,CAACH,MAAM,CAAC;IACtC,OAAOA,MAAM,CAACE,UAAU,EAAE;EAC5B;EACA,MAAME,EAAE,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;EAC5B,MAAMC,UAAU,GAAGN,MAAM,GAAG,MAAMA,MAAM,CAACO,eAAe,CAACH,EAAE,CAAC,CAAC,CAAC,CAAE,GAAG,MAAOI,IAAI,CAACC,MAAM,EAAE,GAAG,IAAI,GAAI,IAAI;EACtG,OAAO,sCAAsC,CAACC,OAAO,CAAC,QAAQ,EAAGC,CAAC,IAChE,CAAC,CAACA,CAAC,GAAIL,UAAU,EAAE,GAAI,EAAE,IAAK,CAACK,CAAC,GAAG,CAAI,EAAEC,QAAQ,CAAC,EAAE,CAAC,CACtD;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}