{"ast":null,"code":"// API Service for communicating with backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\nclass APIService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Check if backend is healthy and AI is configured\n   * @returns {Promise<Object>} Health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/health`);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        status: 'unhealthy',\n        aiConfigured: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Analyze uploaded image and get DSLR settings\n   * @param {File} imageFile - The uploaded image file\n   * @returns {Promise<Object>} Camera settings and analysis\n   */\n  async analyzeImage(imageFile) {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n      const response = await fetch(`${this.baseURL}/analyze-image`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Analysis failed: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      console.error('Image analysis failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Refine camera settings based on user input\n   * @param {string} userInput - User's refinement request\n   * @param {Object} currentSettings - Current camera settings\n   * @returns {Promise<Object>} Refined camera settings\n   */\n  async refineSettings(userInput, currentSettings) {\n    try {\n      const response = await fetch(`${this.baseURL}/refine-settings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userInput,\n          currentSettings\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Refinement failed: ${response.status}`);\n      }\n      const result = await response.json();\n      return result.data;\n    } catch (error) {\n      console.error('Settings refinement failed:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nconst apiService = new APIService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","APIService","constructor","baseURL","checkHealth","response","fetch","ok","Error","status","json","error","console","aiConfigured","message","analyzeImage","imageFile","formData","FormData","append","method","body","errorData","result","data","refineSettings","userInput","currentSettings","headers","JSON","stringify","apiService"],"sources":["/Users/nihalmaddala/photo-proj/src/services/apiService.js"],"sourcesContent":["// API Service for communicating with backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\nclass APIService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  /**\n   * Check if backend is healthy and AI is configured\n   * @returns {Promise<Object>} Health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${this.baseURL}/health`);\n      if (!response.ok) {\n        throw new Error(`Health check failed: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Health check failed:', error);\n      return {\n        status: 'unhealthy',\n        aiConfigured: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Analyze uploaded image and get DSLR settings\n   * @param {File} imageFile - The uploaded image file\n   * @returns {Promise<Object>} Camera settings and analysis\n   */\n  async analyzeImage(imageFile) {\n    try {\n      const formData = new FormData();\n      formData.append('image', imageFile);\n\n      const response = await fetch(`${this.baseURL}/analyze-image`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Analysis failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.data;\n      \n    } catch (error) {\n      console.error('Image analysis failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Refine camera settings based on user input\n   * @param {string} userInput - User's refinement request\n   * @param {Object} currentSettings - Current camera settings\n   * @returns {Promise<Object>} Refined camera settings\n   */\n  async refineSettings(userInput, currentSettings) {\n    try {\n      const response = await fetch(`${this.baseURL}/refine-settings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userInput,\n          currentSettings\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Refinement failed: ${response.status}`);\n      }\n\n      const result = await response.json();\n      return result.data;\n      \n    } catch (error) {\n      console.error('Settings refinement failed:', error);\n      throw error;\n    }\n  }\n}\n\n// Export singleton instance\nconst apiService = new APIService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}