{"ast":null,"code":"import OpenAI from 'openai';\nimport { AI_CONFIG, PHOTOGRAPHY_PROMPTS } from '../config/aiConfig';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: AI_CONFIG.OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Note: In production, use backend API\n});\nclass AIService {\n  constructor() {\n    this.isConfigured = AI_CONFIG.OPENAI_API_KEY !== 'your-openai-api-key-here';\n  }\n\n  /**\n   * Analyze uploaded image and provide DSLR settings\n   * @param {File} imageFile - The uploaded image file\n   * @returns {Promise<Object>} Camera settings and analysis\n   */\n  async analyzeImage(imageFile) {\n    if (!this.isConfigured) {\n      return this.getFallbackAnalysis();\n    }\n    try {\n      // Convert image to base64 for OpenAI Vision API\n      const base64Image = await this.fileToBase64(imageFile);\n      const response = await openai.chat.completions.create({\n        model: AI_CONFIG.IMAGE_ANALYSIS.MODEL,\n        messages: [{\n          role: \"user\",\n          content: [{\n            type: \"text\",\n            text: PHOTOGRAPHY_PROMPTS.IMAGE_ANALYSIS\n          }, {\n            type: \"image_url\",\n            image_url: {\n              url: `data:image/jpeg;base64,${base64Image}`,\n              detail: \"high\"\n            }\n          }]\n        }],\n        max_tokens: AI_CONFIG.IMAGE_ANALYSIS.MAX_TOKENS,\n        temperature: AI_CONFIG.IMAGE_ANALYSIS.TEMPERATURE\n      });\n      const analysisText = response.choices[0].message.content;\n      return this.parseAIResponse(analysisText);\n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return this.getFallbackAnalysis();\n    }\n  }\n\n  /**\n   * Refine camera settings based on user's natural language input\n   * @param {string} userInput - User's refinement request\n   * @param {Object} currentSettings - Current camera settings\n   * @returns {Promise<Object>} Refined camera settings\n   */\n  async refineSettings(userInput, currentSettings) {\n    if (!this.isConfigured) {\n      return this.getFallbackRefinement(userInput, currentSettings);\n    }\n    try {\n      const prompt = PHOTOGRAPHY_PROMPTS.REFINEMENT_ANALYSIS.replace('{currentISO}', currentSettings.iso).replace('{currentAperture}', currentSettings.aperture).replace('{currentShutterSpeed}', currentSettings.shutterSpeed).replace('{userInput}', userInput);\n      const response = await openai.chat.completions.create({\n        model: AI_CONFIG.NLP.MODEL,\n        messages: [{\n          role: \"user\",\n          content: prompt\n        }],\n        max_tokens: AI_CONFIG.NLP.MAX_TOKENS,\n        temperature: AI_CONFIG.NLP.TEMPERATURE\n      });\n      const refinementText = response.choices[0].message.content;\n      return this.parseAIResponse(refinementText);\n    } catch (error) {\n      console.error('AI Refinement Error:', error);\n      return this.getFallbackRefinement(userInput, currentSettings);\n    }\n  }\n\n  /**\n   * Convert file to base64 for API transmission\n   * @param {File} file - Image file\n   * @returns {Promise<string>} Base64 encoded string\n   */\n  async fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const base64 = reader.result.split(',')[1]; // Remove data:image/jpeg;base64, prefix\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  /**\n   * Parse AI response and validate camera settings\n   * @param {string} responseText - Raw AI response\n   * @returns {Object} Parsed and validated settings\n   */\n  parseAIResponse(responseText) {\n    try {\n      var _parsed$explanations, _parsed$explanations2, _parsed$explanations3;\n      // Extract JSON from response (handle cases where AI adds extra text)\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('No JSON found in AI response');\n      }\n      const parsed = JSON.parse(jsonMatch[0]);\n\n      // Validate and normalize settings\n      return {\n        iso: this.validateISO(parsed.iso),\n        aperture: this.validateAperture(parsed.aperture),\n        shutterSpeed: this.validateShutterSpeed(parsed.shutterSpeed),\n        explanations: {\n          iso: ((_parsed$explanations = parsed.explanations) === null || _parsed$explanations === void 0 ? void 0 : _parsed$explanations.iso) || \"ISO setting optimized for current conditions.\",\n          aperture: ((_parsed$explanations2 = parsed.explanations) === null || _parsed$explanations2 === void 0 ? void 0 : _parsed$explanations2.aperture) || \"Aperture chosen for desired depth of field.\",\n          shutterSpeed: ((_parsed$explanations3 = parsed.explanations) === null || _parsed$explanations3 === void 0 ? void 0 : _parsed$explanations3.shutterSpeed) || \"Shutter speed selected for proper exposure.\"\n        },\n        tip: parsed.tip || null,\n        confidence: parsed.confidence || 0.8,\n        photographyType: parsed.photographyType || 'other',\n        lightingCondition: parsed.lightingCondition || 'mixed'\n      };\n    } catch (error) {\n      console.error('Failed to parse AI response:', error);\n      return this.getFallbackAnalysis();\n    }\n  }\n\n  /**\n   * Validate and normalize ISO value\n   */\n  validateISO(iso) {\n    const numISO = parseInt(iso);\n    if (isNaN(numISO) || numISO < AI_CONFIG.CAMERA_SETTINGS.ISO.MIN || numISO > AI_CONFIG.CAMERA_SETTINGS.ISO.MAX) {\n      return 100; // Default fallback\n    }\n    return numISO;\n  }\n\n  /**\n   * Validate and normalize aperture value\n   */\n  validateAperture(aperture) {\n    const apertureStr = aperture.toString();\n    if (!apertureStr.startsWith('f/')) {\n      return `f/${apertureStr}`;\n    }\n    return apertureStr;\n  }\n\n  /**\n   * Validate and normalize shutter speed value\n   */\n  validateShutterSpeed(shutterSpeed) {\n    const speedStr = shutterSpeed.toString();\n    // Ensure proper formatting\n    if (speedStr.includes('\"') || speedStr.includes('s')) {\n      return speedStr;\n    }\n    if (parseFloat(speedStr) >= 1) {\n      return `${speedStr}\"`;\n    } else {\n      return `1/${Math.round(1 / parseFloat(speedStr))}s`;\n    }\n  }\n\n  /**\n   * Fallback analysis when AI is not configured\n   */\n  getFallbackAnalysis() {\n    return {\n      iso: 100,\n      aperture: 'f/4.0',\n      shutterSpeed: '1/250s',\n      explanations: {\n        iso: \"This low setting is great for bright light and ensures your photo is sharp and noise-free.\",\n        aperture: \"A balanced setting that keeps most of your scene in focus.\",\n        shutterSpeed: \"Fast enough to freeze motion for a crisp shot of a person or pet.\"\n      },\n      tip: null,\n      confidence: 0.5,\n      photographyType: 'other',\n      lightingCondition: 'mixed'\n    };\n  }\n\n  /**\n   * Fallback refinement when AI is not configured\n   */\n  getFallbackRefinement(userInput, currentSettings) {\n    const input = userInput.toLowerCase();\n\n    // Simple keyword-based fallback\n    if (input.includes('blur') || input.includes('bokeh')) {\n      return {\n        ...currentSettings,\n        aperture: 'f/1.8',\n        shutterSpeed: '1/1000s',\n        explanations: {\n          iso: \"Low ISO for maximum image quality.\",\n          aperture: \"Wide aperture creates beautiful background blur.\",\n          shutterSpeed: \"Fast shutter speed balances the wide aperture.\"\n        }\n      };\n    }\n    if (input.includes('sharp') || input.includes('clear')) {\n      return {\n        ...currentSettings,\n        aperture: 'f/8.0',\n        shutterSpeed: '1/125s',\n        explanations: {\n          iso: \"Low ISO for clean, sharp results.\",\n          aperture: \"Smaller aperture increases depth of field for sharper images.\",\n          shutterSpeed: \"Moderate shutter speed prevents camera shake.\"\n        }\n      };\n    }\n    return currentSettings;\n  }\n\n  /**\n   * Check if AI service is properly configured\n   */\n  isAIConfigured() {\n    return this.isConfigured;\n  }\n}\n\n// Export singleton instance\nexport default new AIService();","map":{"version":3,"names":["OpenAI","AI_CONFIG","PHOTOGRAPHY_PROMPTS","openai","apiKey","OPENAI_API_KEY","dangerouslyAllowBrowser","AIService","constructor","isConfigured","analyzeImage","imageFile","getFallbackAnalysis","base64Image","fileToBase64","response","chat","completions","create","model","IMAGE_ANALYSIS","MODEL","messages","role","content","type","text","image_url","url","detail","max_tokens","MAX_TOKENS","temperature","TEMPERATURE","analysisText","choices","message","parseAIResponse","error","console","refineSettings","userInput","currentSettings","getFallbackRefinement","prompt","REFINEMENT_ANALYSIS","replace","iso","aperture","shutterSpeed","NLP","refinementText","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","base64","result","split","onerror","responseText","_parsed$explanations","_parsed$explanations2","_parsed$explanations3","jsonMatch","match","Error","parsed","JSON","parse","validateISO","validateAperture","validateShutterSpeed","explanations","tip","confidence","photographyType","lightingCondition","numISO","parseInt","isNaN","CAMERA_SETTINGS","ISO","MIN","MAX","apertureStr","toString","startsWith","speedStr","includes","parseFloat","Math","round","input","toLowerCase","isAIConfigured"],"sources":["/Users/nihalmaddala/photo-proj/src/services/aiService.js"],"sourcesContent":["import OpenAI from 'openai';\nimport { AI_CONFIG, PHOTOGRAPHY_PROMPTS } from '../config/aiConfig';\n\n// Initialize OpenAI client\nconst openai = new OpenAI({\n  apiKey: AI_CONFIG.OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true // Note: In production, use backend API\n});\n\nclass AIService {\n  constructor() {\n    this.isConfigured = AI_CONFIG.OPENAI_API_KEY !== 'your-openai-api-key-here';\n  }\n\n  /**\n   * Analyze uploaded image and provide DSLR settings\n   * @param {File} imageFile - The uploaded image file\n   * @returns {Promise<Object>} Camera settings and analysis\n   */\n  async analyzeImage(imageFile) {\n    if (!this.isConfigured) {\n      return this.getFallbackAnalysis();\n    }\n\n    try {\n      // Convert image to base64 for OpenAI Vision API\n      const base64Image = await this.fileToBase64(imageFile);\n      \n      const response = await openai.chat.completions.create({\n        model: AI_CONFIG.IMAGE_ANALYSIS.MODEL,\n        messages: [\n          {\n            role: \"user\",\n            content: [\n              {\n                type: \"text\",\n                text: PHOTOGRAPHY_PROMPTS.IMAGE_ANALYSIS\n              },\n              {\n                type: \"image_url\",\n                image_url: {\n                  url: `data:image/jpeg;base64,${base64Image}`,\n                  detail: \"high\"\n                }\n              }\n            ]\n          }\n        ],\n        max_tokens: AI_CONFIG.IMAGE_ANALYSIS.MAX_TOKENS,\n        temperature: AI_CONFIG.IMAGE_ANALYSIS.TEMPERATURE,\n      });\n\n      const analysisText = response.choices[0].message.content;\n      return this.parseAIResponse(analysisText);\n      \n    } catch (error) {\n      console.error('AI Image Analysis Error:', error);\n      return this.getFallbackAnalysis();\n    }\n  }\n\n  /**\n   * Refine camera settings based on user's natural language input\n   * @param {string} userInput - User's refinement request\n   * @param {Object} currentSettings - Current camera settings\n   * @returns {Promise<Object>} Refined camera settings\n   */\n  async refineSettings(userInput, currentSettings) {\n    if (!this.isConfigured) {\n      return this.getFallbackRefinement(userInput, currentSettings);\n    }\n\n    try {\n      const prompt = PHOTOGRAPHY_PROMPTS.REFINEMENT_ANALYSIS\n        .replace('{currentISO}', currentSettings.iso)\n        .replace('{currentAperture}', currentSettings.aperture)\n        .replace('{currentShutterSpeed}', currentSettings.shutterSpeed)\n        .replace('{userInput}', userInput);\n\n      const response = await openai.chat.completions.create({\n        model: AI_CONFIG.NLP.MODEL,\n        messages: [\n          {\n            role: \"user\",\n            content: prompt\n          }\n        ],\n        max_tokens: AI_CONFIG.NLP.MAX_TOKENS,\n        temperature: AI_CONFIG.NLP.TEMPERATURE,\n      });\n\n      const refinementText = response.choices[0].message.content;\n      return this.parseAIResponse(refinementText);\n      \n    } catch (error) {\n      console.error('AI Refinement Error:', error);\n      return this.getFallbackRefinement(userInput, currentSettings);\n    }\n  }\n\n  /**\n   * Convert file to base64 for API transmission\n   * @param {File} file - Image file\n   * @returns {Promise<string>} Base64 encoded string\n   */\n  async fileToBase64(file) {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const base64 = reader.result.split(',')[1]; // Remove data:image/jpeg;base64, prefix\n        resolve(base64);\n      };\n      reader.onerror = error => reject(error);\n    });\n  }\n\n  /**\n   * Parse AI response and validate camera settings\n   * @param {string} responseText - Raw AI response\n   * @returns {Object} Parsed and validated settings\n   */\n  parseAIResponse(responseText) {\n    try {\n      // Extract JSON from response (handle cases where AI adds extra text)\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('No JSON found in AI response');\n      }\n\n      const parsed = JSON.parse(jsonMatch[0]);\n      \n      // Validate and normalize settings\n      return {\n        iso: this.validateISO(parsed.iso),\n        aperture: this.validateAperture(parsed.aperture),\n        shutterSpeed: this.validateShutterSpeed(parsed.shutterSpeed),\n        explanations: {\n          iso: parsed.explanations?.iso || \"ISO setting optimized for current conditions.\",\n          aperture: parsed.explanations?.aperture || \"Aperture chosen for desired depth of field.\",\n          shutterSpeed: parsed.explanations?.shutterSpeed || \"Shutter speed selected for proper exposure.\"\n        },\n        tip: parsed.tip || null,\n        confidence: parsed.confidence || 0.8,\n        photographyType: parsed.photographyType || 'other',\n        lightingCondition: parsed.lightingCondition || 'mixed'\n      };\n      \n    } catch (error) {\n      console.error('Failed to parse AI response:', error);\n      return this.getFallbackAnalysis();\n    }\n  }\n\n  /**\n   * Validate and normalize ISO value\n   */\n  validateISO(iso) {\n    const numISO = parseInt(iso);\n    if (isNaN(numISO) || numISO < AI_CONFIG.CAMERA_SETTINGS.ISO.MIN || numISO > AI_CONFIG.CAMERA_SETTINGS.ISO.MAX) {\n      return 100; // Default fallback\n    }\n    return numISO;\n  }\n\n  /**\n   * Validate and normalize aperture value\n   */\n  validateAperture(aperture) {\n    const apertureStr = aperture.toString();\n    if (!apertureStr.startsWith('f/')) {\n      return `f/${apertureStr}`;\n    }\n    return apertureStr;\n  }\n\n  /**\n   * Validate and normalize shutter speed value\n   */\n  validateShutterSpeed(shutterSpeed) {\n    const speedStr = shutterSpeed.toString();\n    // Ensure proper formatting\n    if (speedStr.includes('\"') || speedStr.includes('s')) {\n      return speedStr;\n    }\n    if (parseFloat(speedStr) >= 1) {\n      return `${speedStr}\"`;\n    } else {\n      return `1/${Math.round(1/parseFloat(speedStr))}s`;\n    }\n  }\n\n  /**\n   * Fallback analysis when AI is not configured\n   */\n  getFallbackAnalysis() {\n    return {\n      iso: 100,\n      aperture: 'f/4.0',\n      shutterSpeed: '1/250s',\n      explanations: {\n        iso: \"This low setting is great for bright light and ensures your photo is sharp and noise-free.\",\n        aperture: \"A balanced setting that keeps most of your scene in focus.\",\n        shutterSpeed: \"Fast enough to freeze motion for a crisp shot of a person or pet.\"\n      },\n      tip: null,\n      confidence: 0.5,\n      photographyType: 'other',\n      lightingCondition: 'mixed'\n    };\n  }\n\n  /**\n   * Fallback refinement when AI is not configured\n   */\n  getFallbackRefinement(userInput, currentSettings) {\n    const input = userInput.toLowerCase();\n    \n    // Simple keyword-based fallback\n    if (input.includes('blur') || input.includes('bokeh')) {\n      return {\n        ...currentSettings,\n        aperture: 'f/1.8',\n        shutterSpeed: '1/1000s',\n        explanations: {\n          iso: \"Low ISO for maximum image quality.\",\n          aperture: \"Wide aperture creates beautiful background blur.\",\n          shutterSpeed: \"Fast shutter speed balances the wide aperture.\"\n        }\n      };\n    }\n    \n    if (input.includes('sharp') || input.includes('clear')) {\n      return {\n        ...currentSettings,\n        aperture: 'f/8.0',\n        shutterSpeed: '1/125s',\n        explanations: {\n          iso: \"Low ISO for clean, sharp results.\",\n          aperture: \"Smaller aperture increases depth of field for sharper images.\",\n          shutterSpeed: \"Moderate shutter speed prevents camera shake.\"\n        }\n      };\n    }\n    \n    return currentSettings;\n  }\n\n  /**\n   * Check if AI service is properly configured\n   */\n  isAIConfigured() {\n    return this.isConfigured;\n  }\n}\n\n// Export singleton instance\nexport default new AIService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}