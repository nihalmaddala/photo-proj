{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { CursorPage } from \"../core/pagination.mjs\";\nimport { buildHeaders } from \"../internal/headers.mjs\";\nimport { sleep } from \"../internal/utils/sleep.mjs\";\nimport { APIConnectionTimeoutError } from \"../error.mjs\";\nimport { multipartFormRequestOptions } from \"../internal/uploads.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. Individual files can be\n   * up to 512 MB, and the size of all files uploaded by one organization can be up\n   * to 1 TB.\n   *\n   * The Assistants API supports files up to 2 million tokens and of specific file\n   * types. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n   * details.\n   *\n   * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n   * required formats for fine-tuning\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * models.\n   *\n   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n   * has a specific required\n   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body, options) {\n    return this._client.post('/files', multipartFormRequestOptions({\n      body,\n      ...options\n    }, this._client));\n  }\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileID, options) {\n    return this._client.get(path`/files/${fileID}`, options);\n  }\n  /**\n   * Returns a list of files.\n   */\n  list(query = {}, options) {\n    return this._client.getAPIList('/files', CursorPage, {\n      query,\n      ...options\n    });\n  }\n  /**\n   * Delete a file.\n   */\n  delete(fileID, options) {\n    return this._client.delete(path`/files/${fileID}`, options);\n  }\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileID, options) {\n    return this._client.get(path`/files/${fileID}/content`, {\n      ...options,\n      headers: buildHeaders([{\n        Accept: 'application/binary'\n      }, options?.headers]),\n      __binaryResponse: true\n    });\n  }\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(id, {\n    pollInterval = 5000,\n    maxWait = 30 * 60 * 1000\n  } = {}) {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n    const start = Date.now();\n    let file = await this.retrieve(id);\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`\n        });\n      }\n    }\n    return file;\n  }\n}","map":{"version":3,"names":["APIResource","CursorPage","buildHeaders","sleep","APIConnectionTimeoutError","multipartFormRequestOptions","path","Files","create","body","options","_client","post","retrieve","fileID","get","list","query","getAPIList","delete","content","headers","Accept","__binaryResponse","waitForProcessing","id","pollInterval","maxWait","TERMINAL_STATES","Set","start","Date","now","file","status","has","message"],"sources":["/Users/nihalmaddala/photo-proj/node_modules/openai/src/resources/files.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { APIResource } from '../core/resource';\nimport { APIPromise } from '../core/api-promise';\nimport { CursorPage, type CursorPageParams, PagePromise } from '../core/pagination';\nimport { type Uploadable } from '../core/uploads';\nimport { buildHeaders } from '../internal/headers';\nimport { RequestOptions } from '../internal/request-options';\nimport { sleep } from '../internal/utils/sleep';\nimport { APIConnectionTimeoutError } from '../error';\nimport { multipartFormRequestOptions } from '../internal/uploads';\nimport { path } from '../internal/utils/path';\n\nexport class Files extends APIResource {\n  /**\n   * Upload a file that can be used across various endpoints. Individual files can be\n   * up to 512 MB, and the size of all files uploaded by one organization can be up\n   * to 1 TB.\n   *\n   * The Assistants API supports files up to 2 million tokens and of specific file\n   * types. See the\n   * [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools) for\n   * details.\n   *\n   * The Fine-tuning API only supports `.jsonl` files. The input also has certain\n   * required formats for fine-tuning\n   * [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input) or\n   * [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n   * models.\n   *\n   * The Batch API only supports `.jsonl` files up to 200 MB in size. The input also\n   * has a specific required\n   * [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n   *\n   * Please [contact us](https://help.openai.com/) if you need to increase these\n   * storage limits.\n   */\n  create(body: FileCreateParams, options?: RequestOptions): APIPromise<FileObject> {\n    return this._client.post('/files', multipartFormRequestOptions({ body, ...options }, this._client));\n  }\n\n  /**\n   * Returns information about a specific file.\n   */\n  retrieve(fileID: string, options?: RequestOptions): APIPromise<FileObject> {\n    return this._client.get(path`/files/${fileID}`, options);\n  }\n\n  /**\n   * Returns a list of files.\n   */\n  list(\n    query: FileListParams | null | undefined = {},\n    options?: RequestOptions,\n  ): PagePromise<FileObjectsPage, FileObject> {\n    return this._client.getAPIList('/files', CursorPage<FileObject>, { query, ...options });\n  }\n\n  /**\n   * Delete a file.\n   */\n  delete(fileID: string, options?: RequestOptions): APIPromise<FileDeleted> {\n    return this._client.delete(path`/files/${fileID}`, options);\n  }\n\n  /**\n   * Returns the contents of the specified file.\n   */\n  content(fileID: string, options?: RequestOptions): APIPromise<Response> {\n    return this._client.get(path`/files/${fileID}/content`, {\n      ...options,\n      headers: buildHeaders([{ Accept: 'application/binary' }, options?.headers]),\n      __binaryResponse: true,\n    });\n  }\n\n  /**\n   * Waits for the given file to be processed, default timeout is 30 mins.\n   */\n  async waitForProcessing(\n    id: string,\n    { pollInterval = 5000, maxWait = 30 * 60 * 1000 }: { pollInterval?: number; maxWait?: number } = {},\n  ): Promise<FileObject> {\n    const TERMINAL_STATES = new Set(['processed', 'error', 'deleted']);\n\n    const start = Date.now();\n    let file = await this.retrieve(id);\n\n    while (!file.status || !TERMINAL_STATES.has(file.status)) {\n      await sleep(pollInterval);\n\n      file = await this.retrieve(id);\n      if (Date.now() - start > maxWait) {\n        throw new APIConnectionTimeoutError({\n          message: `Giving up on waiting for file ${id} to finish processing after ${maxWait} milliseconds.`,\n        });\n      }\n    }\n\n    return file;\n  }\n}\n\nexport type FileObjectsPage = CursorPage<FileObject>;\n\nexport type FileContent = string;\n\nexport interface FileDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'file';\n}\n\n/**\n * The `File` object represents a document that has been uploaded to OpenAI.\n */\nexport interface FileObject {\n  /**\n   * The file identifier, which can be referenced in the API endpoints.\n   */\n  id: string;\n\n  /**\n   * The size of the file, in bytes.\n   */\n  bytes: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the file was created.\n   */\n  created_at: number;\n\n  /**\n   * The name of the file.\n   */\n  filename: string;\n\n  /**\n   * The object type, which is always `file`.\n   */\n  object: 'file';\n\n  /**\n   * The intended purpose of the file. Supported values are `assistants`,\n   * `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results`,\n   * `vision`, and `user_data`.\n   */\n  purpose:\n    | 'assistants'\n    | 'assistants_output'\n    | 'batch'\n    | 'batch_output'\n    | 'fine-tune'\n    | 'fine-tune-results'\n    | 'vision'\n    | 'user_data';\n\n  /**\n   * @deprecated Deprecated. The current status of the file, which can be either\n   * `uploaded`, `processed`, or `error`.\n   */\n  status: 'uploaded' | 'processed' | 'error';\n\n  /**\n   * The Unix timestamp (in seconds) for when the file will expire.\n   */\n  expires_at?: number;\n\n  /**\n   * @deprecated Deprecated. For details on why a fine-tuning training file failed\n   * validation, see the `error` field on `fine_tuning.job`.\n   */\n  status_details?: string;\n}\n\n/**\n * The intended purpose of the uploaded file. One of: - `assistants`: Used in the\n * Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for\n * fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`:\n * Flexible file type for any purpose - `evals`: Used for eval data sets\n */\nexport type FilePurpose = 'assistants' | 'batch' | 'fine-tune' | 'vision' | 'user_data' | 'evals';\n\nexport interface FileCreateParams {\n  /**\n   * The File object (not file name) to be uploaded.\n   */\n  file: Uploadable;\n\n  /**\n   * The intended purpose of the uploaded file. One of: - `assistants`: Used in the\n   * Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for\n   * fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`:\n   * Flexible file type for any purpose - `evals`: Used for eval data sets\n   */\n  purpose: FilePurpose;\n\n  /**\n   * The expiration policy for a file. By default, files with `purpose=batch` expire\n   * after 30 days and all other files are persisted until they are manually deleted.\n   */\n  expires_after?: FileCreateParams.ExpiresAfter;\n}\n\nexport namespace FileCreateParams {\n  /**\n   * The expiration policy for a file. By default, files with `purpose=batch` expire\n   * after 30 days and all other files are persisted until they are manually deleted.\n   */\n  export interface ExpiresAfter {\n    /**\n     * Anchor timestamp after which the expiration policy applies. Supported anchors:\n     * `created_at`.\n     */\n    anchor: 'created_at';\n\n    /**\n     * The number of seconds after the anchor time that the file will expire. Must be\n     * between 3600 (1 hour) and 2592000 (30 days).\n     */\n    seconds: number;\n  }\n}\n\nexport interface FileListParams extends CursorPageParams {\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n\n  /**\n   * Only return files with the given purpose.\n   */\n  purpose?: string;\n}\n\nexport declare namespace Files {\n  export {\n    type FileContent as FileContent,\n    type FileDeleted as FileDeleted,\n    type FileObject as FileObject,\n    type FilePurpose as FilePurpose,\n    type FileObjectsPage as FileObjectsPage,\n    type FileCreateParams as FileCreateParams,\n    type FileListParams as FileListParams,\n  };\n}\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAEbC,UAAU,QAAsC;SAEhDC,YAAY,QAAE;SAEdC,KAAK,QAAE;SACPC,yBAAyB,QAAE;SAC3BC,2BAA2B,QAAE;SAC7BC,IAAI,QAAE;AAEf,OAAM,MAAOC,KAAM,SAAQP,WAAW;EACpC;;;;;;;;;;;;;;;;;;;;;;;EAuBAQ,MAAMA,CAACC,IAAsB,EAAEC,OAAwB;IACrD,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,QAAQ,EAAEP,2BAA2B,CAAC;MAAEI,IAAI;MAAE,GAAGC;IAAO,CAAE,EAAE,IAAI,CAACC,OAAO,CAAC,CAAC;EACrG;EAEA;;;EAGAE,QAAQA,CAACC,MAAc,EAAEJ,OAAwB;IAC/C,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAACT,IAAI,UAAUQ,MAAM,EAAE,EAAEJ,OAAO,CAAC;EAC1D;EAEA;;;EAGAM,IAAIA,CACFC,KAAA,GAA2C,EAAE,EAC7CP,OAAwB;IAExB,OAAO,IAAI,CAACC,OAAO,CAACO,UAAU,CAAC,QAAQ,EAAEjB,UAAsB,EAAE;MAAEgB,KAAK;MAAE,GAAGP;IAAO,CAAE,CAAC;EACzF;EAEA;;;EAGAS,MAAMA,CAACL,MAAc,EAAEJ,OAAwB;IAC7C,OAAO,IAAI,CAACC,OAAO,CAACQ,MAAM,CAACb,IAAI,UAAUQ,MAAM,EAAE,EAAEJ,OAAO,CAAC;EAC7D;EAEA;;;EAGAU,OAAOA,CAACN,MAAc,EAAEJ,OAAwB;IAC9C,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAACT,IAAI,UAAUQ,MAAM,UAAU,EAAE;MACtD,GAAGJ,OAAO;MACVW,OAAO,EAAEnB,YAAY,CAAC,CAAC;QAAEoB,MAAM,EAAE;MAAoB,CAAE,EAAEZ,OAAO,EAAEW,OAAO,CAAC,CAAC;MAC3EE,gBAAgB,EAAE;KACnB,CAAC;EACJ;EAEA;;;EAGA,MAAMC,iBAAiBA,CACrBC,EAAU,EACV;IAAEC,YAAY,GAAG,IAAI;IAAEC,OAAO,GAAG,EAAE,GAAG,EAAE,GAAG;EAAI,IAAkD,EAAE;IAEnG,MAAMC,eAAe,GAAG,IAAIC,GAAG,CAAC,CAAC,WAAW,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAElE,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,EAAE;IACxB,IAAIC,IAAI,GAAG,MAAM,IAAI,CAACpB,QAAQ,CAACY,EAAE,CAAC;IAElC,OAAO,CAACQ,IAAI,CAACC,MAAM,IAAI,CAACN,eAAe,CAACO,GAAG,CAACF,IAAI,CAACC,MAAM,CAAC,EAAE;MACxD,MAAM/B,KAAK,CAACuB,YAAY,CAAC;MAEzBO,IAAI,GAAG,MAAM,IAAI,CAACpB,QAAQ,CAACY,EAAE,CAAC;MAC9B,IAAIM,IAAI,CAACC,GAAG,EAAE,GAAGF,KAAK,GAAGH,OAAO,EAAE;QAChC,MAAM,IAAIvB,yBAAyB,CAAC;UAClCgC,OAAO,EAAE,iCAAiCX,EAAE,+BAA+BE,OAAO;SACnF,CAAC;MACJ;IACF;IAEA,OAAOM,IAAI;EACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}