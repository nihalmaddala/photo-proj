{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { OpenAIError } from \"../../core/error.mjs\";\nimport { encodeUTF8 } from \"./bytes.mjs\";\nexport const toBase64 = data => {\n  if (!data) return '';\n  if (typeof globalThis.Buffer !== 'undefined') {\n    return globalThis.Buffer.from(data).toString('base64');\n  }\n  if (typeof data === 'string') {\n    data = encodeUTF8(data);\n  }\n  if (typeof btoa !== 'undefined') {\n    return btoa(String.fromCharCode.apply(null, data));\n  }\n  throw new OpenAIError('Cannot generate base64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexport const fromBase64 = str => {\n  if (typeof globalThis.Buffer !== 'undefined') {\n    const buf = globalThis.Buffer.from(str, 'base64');\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  if (typeof atob !== 'undefined') {\n    const bstr = atob(str);\n    const buf = new Uint8Array(bstr.length);\n    for (let i = 0; i < bstr.length; i++) {\n      buf[i] = bstr.charCodeAt(i);\n    }\n    return buf;\n  }\n  throw new OpenAIError('Cannot decode base64 string; Expected `Buffer` or `atob` to be defined');\n};\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */\nexport const toFloat32Array = base64Str => {\n  if (typeof Buffer !== 'undefined') {\n    // for Node.js environment\n    const buf = Buffer.from(base64Str, 'base64');\n    return Array.from(new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT));\n  } else {\n    // for legacy web platform APIs\n    const binaryStr = atob(base64Str);\n    const len = binaryStr.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryStr.charCodeAt(i);\n    }\n    return Array.from(new Float32Array(bytes.buffer));\n  }\n};","map":{"version":3,"names":["OpenAIError","encodeUTF8","toBase64","data","globalThis","Buffer","from","toString","btoa","String","fromCharCode","apply","fromBase64","str","buf","Uint8Array","buffer","byteOffset","byteLength","atob","bstr","length","i","charCodeAt","toFloat32Array","base64Str","Array","Float32Array","BYTES_PER_ELEMENT","binaryStr","len","bytes"],"sources":["/Users/nihalmaddala/photo-proj/node_modules/openai/src/internal/utils/base64.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { OpenAIError } from '../../core/error';\nimport { encodeUTF8 } from './bytes';\n\nexport const toBase64 = (data: string | Uint8Array | null | undefined): string => {\n  if (!data) return '';\n\n  if (typeof (globalThis as any).Buffer !== 'undefined') {\n    return (globalThis as any).Buffer.from(data).toString('base64');\n  }\n\n  if (typeof data === 'string') {\n    data = encodeUTF8(data);\n  }\n\n  if (typeof btoa !== 'undefined') {\n    return btoa(String.fromCharCode.apply(null, data as any));\n  }\n\n  throw new OpenAIError('Cannot generate base64 string; Expected `Buffer` or `btoa` to be defined');\n};\n\nexport const fromBase64 = (str: string): Uint8Array => {\n  if (typeof (globalThis as any).Buffer !== 'undefined') {\n    const buf = (globalThis as any).Buffer.from(str, 'base64');\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n\n  if (typeof atob !== 'undefined') {\n    const bstr = atob(str);\n    const buf = new Uint8Array(bstr.length);\n    for (let i = 0; i < bstr.length; i++) {\n      buf[i] = bstr.charCodeAt(i);\n    }\n    return buf;\n  }\n\n  throw new OpenAIError('Cannot decode base64 string; Expected `Buffer` or `atob` to be defined');\n};\n\n/**\n * Converts a Base64 encoded string to a Float32Array.\n * @param base64Str - The Base64 encoded string.\n * @returns An Array of numbers interpreted as Float32 values.\n */\nexport const toFloat32Array = (base64Str: string): Array<number> => {\n  if (typeof Buffer !== 'undefined') {\n    // for Node.js environment\n    const buf = Buffer.from(base64Str, 'base64');\n    return Array.from(\n      new Float32Array(buf.buffer, buf.byteOffset, buf.length / Float32Array.BYTES_PER_ELEMENT),\n    );\n  } else {\n    // for legacy web platform APIs\n    const binaryStr = atob(base64Str);\n    const len = binaryStr.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryStr.charCodeAt(i);\n    }\n    return Array.from(new Float32Array(bytes.buffer));\n  }\n};\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SACbC,UAAU,QAAE;AAErB,OAAO,MAAMC,QAAQ,GAAIC,IAA4C,IAAY;EAC/E,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;EAEpB,IAAI,OAAQC,UAAkB,CAACC,MAAM,KAAK,WAAW,EAAE;IACrD,OAAQD,UAAkB,CAACC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACI,QAAQ,CAAC,QAAQ,CAAC;EACjE;EAEA,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;IAC5BA,IAAI,GAAGF,UAAU,CAACE,IAAI,CAAC;EACzB;EAEA,IAAI,OAAOK,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAOA,IAAI,CAACC,MAAM,CAACC,YAAY,CAACC,KAAK,CAAC,IAAI,EAAER,IAAW,CAAC,CAAC;EAC3D;EAEA,MAAM,IAAIH,WAAW,CAAC,0EAA0E,CAAC;AACnG,CAAC;AAED,OAAO,MAAMY,UAAU,GAAIC,GAAW,IAAgB;EACpD,IAAI,OAAQT,UAAkB,CAACC,MAAM,KAAK,WAAW,EAAE;IACrD,MAAMS,GAAG,GAAIV,UAAkB,CAACC,MAAM,CAACC,IAAI,CAACO,GAAG,EAAE,QAAQ,CAAC;IAC1D,OAAO,IAAIE,UAAU,CAACD,GAAG,CAACE,MAAM,EAAEF,GAAG,CAACG,UAAU,EAAEH,GAAG,CAACI,UAAU,CAAC;EACnE;EAEA,IAAI,OAAOC,IAAI,KAAK,WAAW,EAAE;IAC/B,MAAMC,IAAI,GAAGD,IAAI,CAACN,GAAG,CAAC;IACtB,MAAMC,GAAG,GAAG,IAAIC,UAAU,CAACK,IAAI,CAACC,MAAM,CAAC;IACvC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAE;MACpCR,GAAG,CAACQ,CAAC,CAAC,GAAGF,IAAI,CAACG,UAAU,CAACD,CAAC,CAAC;IAC7B;IACA,OAAOR,GAAG;EACZ;EAEA,MAAM,IAAId,WAAW,CAAC,wEAAwE,CAAC;AACjG,CAAC;AAED;;;;;AAKA,OAAO,MAAMwB,cAAc,GAAIC,SAAiB,IAAmB;EACjE,IAAI,OAAOpB,MAAM,KAAK,WAAW,EAAE;IACjC;IACA,MAAMS,GAAG,GAAGT,MAAM,CAACC,IAAI,CAACmB,SAAS,EAAE,QAAQ,CAAC;IAC5C,OAAOC,KAAK,CAACpB,IAAI,CACf,IAAIqB,YAAY,CAACb,GAAG,CAACE,MAAM,EAAEF,GAAG,CAACG,UAAU,EAAEH,GAAG,CAACO,MAAM,GAAGM,YAAY,CAACC,iBAAiB,CAAC,CAC1F;EACH,CAAC,MAAM;IACL;IACA,MAAMC,SAAS,GAAGV,IAAI,CAACM,SAAS,CAAC;IACjC,MAAMK,GAAG,GAAGD,SAAS,CAACR,MAAM;IAC5B,MAAMU,KAAK,GAAG,IAAIhB,UAAU,CAACe,GAAG,CAAC;IACjC,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,GAAG,EAAER,CAAC,EAAE,EAAE;MAC5BS,KAAK,CAACT,CAAC,CAAC,GAAGO,SAAS,CAACN,UAAU,CAACD,CAAC,CAAC;IACpC;IACA,OAAOI,KAAK,CAACpB,IAAI,CAAC,IAAIqB,YAAY,CAACI,KAAK,CAACf,MAAM,CAAC,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}