{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nvar _APIPromise_client;\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"../internal/tslib.mjs\";\nimport { defaultParseResponse, addRequestID } from \"../internal/parse.mjs\";\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n  constructor(client, responsePromise, parseResponse = defaultParseResponse) {\n    super(resolve => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null);\n    });\n    this.responsePromise = responsePromise;\n    this.parseResponse = parseResponse;\n    _APIPromise_client.set(this, void 0);\n    __classPrivateFieldSet(this, _APIPromise_client, client, \"f\");\n  }\n  _thenUnwrap(transform) {\n    return new APIPromise(__classPrivateFieldGet(this, _APIPromise_client, \"f\"), this.responsePromise, async (client, props) => addRequestID(transform(await this.parseResponse(client, props), props), props.response));\n  }\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n   * to your `tsconfig.json`.\n   */\n  asResponse() {\n    return this.responsePromise.then(p => p.response);\n  }\n  /**\n   * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n   * returned via the X-Request-ID header which is useful for debugging requests and reporting\n   * issues to OpenAI.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n   * to your `tsconfig.json`.\n   */\n  async withResponse() {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return {\n      data,\n      response,\n      request_id: response.headers.get('x-request-id')\n    };\n  }\n  parse() {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then(data => this.parseResponse(__classPrivateFieldGet(this, _APIPromise_client, \"f\"), data));\n    }\n    return this.parsedPromise;\n  }\n  then(onfulfilled, onrejected) {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n  catch(onrejected) {\n    return this.parse().catch(onrejected);\n  }\n  finally(onfinally) {\n    return this.parse().finally(onfinally);\n  }\n}\n_APIPromise_client = new WeakMap();","map":{"version":3,"names":["defaultParseResponse","addRequestID","APIPromise","Promise","constructor","client","responsePromise","parseResponse","resolve","_APIPromise_client","set","__classPrivateFieldSet","_thenUnwrap","transform","__classPrivateFieldGet","props","response","asResponse","then","p","withResponse","data","all","parse","request_id","headers","get","parsedPromise","onfulfilled","onrejected","catch","finally","onfinally"],"sources":["/Users/nihalmaddala/photo-proj/node_modules/openai/src/core/api-promise.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nimport { type OpenAI } from '../client';\n\nimport { type PromiseOrValue } from '../internal/types';\nimport {\n  type APIResponseProps,\n  defaultParseResponse,\n  type WithRequestID,\n  addRequestID,\n} from '../internal/parse';\n\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise<T> extends Promise<WithRequestID<T>> {\n  private parsedPromise: Promise<WithRequestID<T>> | undefined;\n  #client: OpenAI;\n\n  constructor(\n    client: OpenAI,\n    private responsePromise: Promise<APIResponseProps>,\n    private parseResponse: (\n      client: OpenAI,\n      props: APIResponseProps,\n    ) => PromiseOrValue<WithRequestID<T>> = defaultParseResponse,\n  ) {\n    super((resolve) => {\n      // this is maybe a bit weird but this has to be a no-op to not implicitly\n      // parse the response body; instead .then, .catch, .finally are overridden\n      // to parse the response\n      resolve(null as any);\n    });\n    this.#client = client;\n  }\n\n  _thenUnwrap<U>(transform: (data: T, props: APIResponseProps) => U): APIPromise<U> {\n    return new APIPromise(this.#client, this.responsePromise, async (client, props) =>\n      addRequestID(transform(await this.parseResponse(client, props), props), props.response),\n    );\n  }\n\n  /**\n   * Gets the raw `Response` instance instead of parsing the response\n   * data.\n   *\n   * If you want to parse the response body but still get the `Response`\n   * instance, you can use {@link withResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n   * to your `tsconfig.json`.\n   */\n  asResponse(): Promise<Response> {\n    return this.responsePromise.then((p) => p.response);\n  }\n\n  /**\n   * Gets the parsed response data, the raw `Response` instance and the ID of the request,\n   * returned via the X-Request-ID header which is useful for debugging requests and reporting\n   * issues to OpenAI.\n   *\n   * If you just want to get the raw `Response` instance without parsing it,\n   * you can use {@link asResponse()}.\n   *\n   * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n   * Try setting `\"moduleResolution\": \"NodeNext\"` or add `\"lib\": [\"DOM\"]`\n   * to your `tsconfig.json`.\n   */\n  async withResponse(): Promise<{ data: T; response: Response; request_id: string | null }> {\n    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n    return { data, response, request_id: response.headers.get('x-request-id') };\n  }\n\n  private parse(): Promise<WithRequestID<T>> {\n    if (!this.parsedPromise) {\n      this.parsedPromise = this.responsePromise.then((data) =>\n        this.parseResponse(this.#client, data),\n      ) as any as Promise<WithRequestID<T>>;\n    }\n    return this.parsedPromise;\n  }\n\n  override then<TResult1 = WithRequestID<T>, TResult2 = never>(\n    onfulfilled?: ((value: WithRequestID<T>) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    return this.parse().then(onfulfilled, onrejected);\n  }\n\n  override catch<TResult = never>(\n    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null,\n  ): Promise<WithRequestID<T> | TResult> {\n    return this.parse().catch(onrejected);\n  }\n\n  override finally(onfinally?: (() => void) | undefined | null): Promise<WithRequestID<T>> {\n    return this.parse().finally(onfinally);\n  }\n}\n"],"mappings":"AAAA;;;SAOEA,oBAAoB,EAEpBC,YAAY,QACb;AAED;;;;AAIA,OAAM,MAAOC,UAAc,SAAQC,OAAyB;EAI1DC,YACEC,MAAc,EACNC,eAA0C,EAC1CC,aAAA,GAGgCP,oBAAoB;IAE5D,KAAK,CAAEQ,OAAO,IAAI;MAChB;MACA;MACA;MACAA,OAAO,CAAC,IAAW,CAAC;IACtB,CAAC,CAAC;IAXM,KAAAF,eAAe,GAAfA,eAAe;IACf,KAAAC,aAAa,GAAbA,aAAa;IALvBE,kBAAA,CAAAC,GAAA;IAgBEC,sBAAA,KAAI,EAAAF,kBAAA,EAAWJ,MAAM;EACvB;EAEAO,WAAWA,CAAIC,SAAkD;IAC/D,OAAO,IAAIX,UAAU,CAACY,sBAAA,KAAI,EAAAL,kBAAA,MAAQ,EAAE,IAAI,CAACH,eAAe,EAAE,OAAOD,MAAM,EAAEU,KAAK,KAC5Ed,YAAY,CAACY,SAAS,CAAC,MAAM,IAAI,CAACN,aAAa,CAACF,MAAM,EAAEU,KAAK,CAAC,EAAEA,KAAK,CAAC,EAAEA,KAAK,CAACC,QAAQ,CAAC,CACxF;EACH;EAEA;;;;;;;;;;;EAWAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACX,eAAe,CAACY,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACH,QAAQ,CAAC;EACrD;EAEA;;;;;;;;;;;;EAYA,MAAMI,YAAYA,CAAA;IAChB,MAAM,CAACC,IAAI,EAAEL,QAAQ,CAAC,GAAG,MAAMb,OAAO,CAACmB,GAAG,CAAC,CAAC,IAAI,CAACC,KAAK,EAAE,EAAE,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;IAC7E,OAAO;MAAEI,IAAI;MAAEL,QAAQ;MAAEQ,UAAU,EAAER,QAAQ,CAACS,OAAO,CAACC,GAAG,CAAC,cAAc;IAAC,CAAE;EAC7E;EAEQH,KAAKA,CAAA;IACX,IAAI,CAAC,IAAI,CAACI,aAAa,EAAE;MACvB,IAAI,CAACA,aAAa,GAAG,IAAI,CAACrB,eAAe,CAACY,IAAI,CAAEG,IAAI,IAClD,IAAI,CAACd,aAAa,CAACO,sBAAA,KAAI,EAAAL,kBAAA,MAAQ,EAAEY,IAAI,CAAC,CACH;IACvC;IACA,OAAO,IAAI,CAACM,aAAa;EAC3B;EAEST,IAAIA,CACXU,WAAgG,EAChGC,UAAmF;IAEnF,OAAO,IAAI,CAACN,KAAK,EAAE,CAACL,IAAI,CAACU,WAAW,EAAEC,UAAU,CAAC;EACnD;EAESC,KAAKA,CACZD,UAAiF;IAEjF,OAAO,IAAI,CAACN,KAAK,EAAE,CAACO,KAAK,CAACD,UAAU,CAAC;EACvC;EAESE,OAAOA,CAACC,SAA2C;IAC1D,OAAO,IAAI,CAACT,KAAK,EAAE,CAACQ,OAAO,CAACC,SAAS,CAAC;EACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}